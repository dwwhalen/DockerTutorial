PART 2 (Containers):
docker build -t friendlyname .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyname  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyname         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container stop $(docker container ls)               # Stop all containers
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry

PART 3 (Services):
docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application

MY STUFF:

START the app:
docker build -t pythonapp .
docker stop my_python_app
docker rm my_python_app
docker run --name=my_python_app -itd -p 5001:5000 pythonapp

run the tests:
cd test
docker build -t mytests .
docker run --name=my_tests_app --rm mytests

rake features_headless

CREATE
sudo docker run -itd --name=client_setup ubuntu /bin/bash
sudo docker attach client_setup
apt-get -qq update
apt-get install curl
- detach from the client container using CTRL+p then CTRL+q
sudo docker stop client_setup
sudo docker commit client_setup client_img
- we now have an image called client_img to use